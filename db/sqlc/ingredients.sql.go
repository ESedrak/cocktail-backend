// Code generated by sqlc. DO NOT EDIT.
// source: ingredients.sql

package db

import (
	"context"
)

const createIngredient = `-- name: CreateIngredient :one
INSERT INTO ingredients (
  ingredient_name
) VALUES (
  $1
)
RETURNING ingredient_id, ingredient_name
`

func (q *Queries) CreateIngredient(ctx context.Context, ingredientName string) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, createIngredient, ingredientName)
	var i Ingredient
	err := row.Scan(&i.IngredientID, &i.IngredientName)
	return i, err
}

const deleteIngredient = `-- name: DeleteIngredient :exec
DELETE FROM ingredients
WHERE ingredient_id = $1
`

func (q *Queries) DeleteIngredient(ctx context.Context, ingredientID int64) error {
	_, err := q.db.ExecContext(ctx, deleteIngredient, ingredientID)
	return err
}

const getIngredient = `-- name: GetIngredient :one
SELECT ingredient_id, ingredient_name FROM ingredients
WHERE ingredient_id = $1 LIMIT 1
`

func (q *Queries) GetIngredient(ctx context.Context, ingredientID int64) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, getIngredient, ingredientID)
	var i Ingredient
	err := row.Scan(&i.IngredientID, &i.IngredientName)
	return i, err
}

const listIngredient = `-- name: ListIngredient :many
SELECT ingredient_id, ingredient_name FROM ingredients
ORDER BY ingredient_id
LIMIT $1
OFFSET $2
`

type ListIngredientParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListIngredient(ctx context.Context, arg ListIngredientParams) ([]Ingredient, error) {
	rows, err := q.db.QueryContext(ctx, listIngredient, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ingredient{}
	for rows.Next() {
		var i Ingredient
		if err := rows.Scan(&i.IngredientID, &i.IngredientName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateIngredient = `-- name: UpdateIngredient :one
UPDATE ingredients
  set ingredient_name = $2
WHERE ingredient_id = $1
RETURNING ingredient_id, ingredient_name
`

type UpdateIngredientParams struct {
	IngredientID   int64  `json:"ingredient_id"`
	IngredientName string `json:"ingredient_name"`
}

func (q *Queries) UpdateIngredient(ctx context.Context, arg UpdateIngredientParams) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, updateIngredient, arg.IngredientID, arg.IngredientName)
	var i Ingredient
	err := row.Scan(&i.IngredientID, &i.IngredientName)
	return i, err
}
