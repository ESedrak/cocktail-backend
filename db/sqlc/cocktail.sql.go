// Code generated by sqlc. DO NOT EDIT.
// source: cocktail.sql

package db

import (
	"context"
)

const createCocktail = `-- name: CreateCocktail :one
INSERT INTO cocktail (
  drink_name, instructions
) VALUES (
  $1, $2
)
RETURNING cocktail_id, drink_name, instructions, image_url, created_at
`

type CreateCocktailParams struct {
	DrinkName    string
	Instructions string
}

func (q *Queries) CreateCocktail(ctx context.Context, arg CreateCocktailParams) (Cocktail, error) {
	row := q.db.QueryRowContext(ctx, createCocktail, arg.DrinkName, arg.Instructions)
	var i Cocktail
	err := row.Scan(
		&i.CocktailID,
		&i.DrinkName,
		&i.Instructions,
		&i.ImageUrl,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCocktail = `-- name: DeleteCocktail :exec
DELETE FROM cocktail
WHERE cocktail_id = $1
`

func (q *Queries) DeleteCocktail(ctx context.Context, cocktailID int64) error {
	_, err := q.db.ExecContext(ctx, deleteCocktail, cocktailID)
	return err
}

const getCocktail = `-- name: GetCocktail :one
SELECT cocktail_id, drink_name, instructions, image_url, created_at FROM cocktail
WHERE cocktail_id = $1 LIMIT 1
`

func (q *Queries) GetCocktail(ctx context.Context, cocktailID int64) (Cocktail, error) {
	row := q.db.QueryRowContext(ctx, getCocktail, cocktailID)
	var i Cocktail
	err := row.Scan(
		&i.CocktailID,
		&i.DrinkName,
		&i.Instructions,
		&i.ImageUrl,
		&i.CreatedAt,
	)
	return i, err
}

const listCocktails = `-- name: ListCocktails :many
SELECT cocktail_id, drink_name, instructions, image_url, created_at FROM cocktail
ORDER BY cocktail_id
LIMIT $1
OFFSET $2
`

type ListCocktailsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListCocktails(ctx context.Context, arg ListCocktailsParams) ([]Cocktail, error) {
	rows, err := q.db.QueryContext(ctx, listCocktails, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cocktail
	for rows.Next() {
		var i Cocktail
		if err := rows.Scan(
			&i.CocktailID,
			&i.DrinkName,
			&i.Instructions,
			&i.ImageUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCocktail = `-- name: UpdateCocktail :one
UPDATE cocktail
  set drink_name = $2,
  instructions = $3
WHERE cocktail_id = $1
RETURNING cocktail_id, drink_name, instructions, image_url, created_at
`

type UpdateCocktailParams struct {
	CocktailID   int64
	DrinkName    string
	Instructions string
}

func (q *Queries) UpdateCocktail(ctx context.Context, arg UpdateCocktailParams) (Cocktail, error) {
	row := q.db.QueryRowContext(ctx, updateCocktail, arg.CocktailID, arg.DrinkName, arg.Instructions)
	var i Cocktail
	err := row.Scan(
		&i.CocktailID,
		&i.DrinkName,
		&i.Instructions,
		&i.ImageUrl,
		&i.CreatedAt,
	)
	return i, err
}
