// Code generated by sqlc. DO NOT EDIT.
// source: measurement_qty.sql

package db

import (
	"context"
	"database/sql"
)

const createMeasurementQty = `-- name: CreateMeasurementQty :one
INSERT INTO measurement_qty (
  qty_amount
) VALUES (
  $1
)
RETURNING measurement_qty_id, qty_amount
`

func (q *Queries) CreateMeasurementQty(ctx context.Context, qtyAmount sql.NullInt64) (MeasurementQty, error) {
	row := q.db.QueryRowContext(ctx, createMeasurementQty, qtyAmount)
	var i MeasurementQty
	err := row.Scan(&i.MeasurementQtyID, &i.QtyAmount)
	return i, err
}

const deleteMeasurementQty = `-- name: DeleteMeasurementQty :exec
DELETE FROM measurement_qty
WHERE measurement_qty_id = $1
`

func (q *Queries) DeleteMeasurementQty(ctx context.Context, measurementQtyID int64) error {
	_, err := q.db.ExecContext(ctx, deleteMeasurementQty, measurementQtyID)
	return err
}

const getMeasurementQty = `-- name: GetMeasurementQty :one
SELECT measurement_qty_id, qty_amount FROM measurement_qty
WHERE measurement_qty_id = $1 LIMIT 1
`

func (q *Queries) GetMeasurementQty(ctx context.Context, measurementQtyID int64) (MeasurementQty, error) {
	row := q.db.QueryRowContext(ctx, getMeasurementQty, measurementQtyID)
	var i MeasurementQty
	err := row.Scan(&i.MeasurementQtyID, &i.QtyAmount)
	return i, err
}

const listMeasurementQty = `-- name: ListMeasurementQty :many
SELECT measurement_qty_id, qty_amount FROM measurement_qty
ORDER BY measurement_qty_id
LIMIT $1
OFFSET $2
`

type ListMeasurementQtyParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListMeasurementQty(ctx context.Context, arg ListMeasurementQtyParams) ([]MeasurementQty, error) {
	rows, err := q.db.QueryContext(ctx, listMeasurementQty, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MeasurementQty
	for rows.Next() {
		var i MeasurementQty
		if err := rows.Scan(&i.MeasurementQtyID, &i.QtyAmount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMeasurementQty = `-- name: UpdateMeasurementQty :one
UPDATE measurement_qty
  set qty_amount = $2
WHERE measurement_qty_id = $1
RETURNING measurement_qty_id, qty_amount
`

type UpdateMeasurementQtyParams struct {
	MeasurementQtyID int64
	QtyAmount        sql.NullInt64
}

func (q *Queries) UpdateMeasurementQty(ctx context.Context, arg UpdateMeasurementQtyParams) (MeasurementQty, error) {
	row := q.db.QueryRowContext(ctx, updateMeasurementQty, arg.MeasurementQtyID, arg.QtyAmount)
	var i MeasurementQty
	err := row.Scan(&i.MeasurementQtyID, &i.QtyAmount)
	return i, err
}
